@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using StudentsManagement.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3 class="password-header">Change password</h3>
<StatusMessage Message="@message" />
<div class="password-change-container">
    <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="change-password-form">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating mb-3">
            <label for="old-password" class="form-label">Old Password</label>
            <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter old password" />
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <label for="new-password" class="form-label">New Password</label>
            <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter new password" />
            <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <label for="confirm-password" class="form-label">Confirm Password</label>
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm new password" />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>

        <button type="submit" class="w-100 btn btn-primary">Update Password</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        // Reload user instance to avoid tracking conflicts
        var currentUser = await UserManager.FindByIdAsync(user.Id);

        if (currentUser == null)
        {
            message = "Error: User not found.";
            return;
        }

        var changePasswordResult = await UserManager.ChangePasswordAsync(currentUser, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(currentUser);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }


    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

<style>
    .dark-mode .password-change-container {
        background-color: #3F474E;
    }

    .dark-mode .form-label {
        color: white;
    }

    .dark-mode .form-control {
        background-color: white;
        color: black;
    }

    .password-header {
        text-align: center;
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #0DAFB2;
    }

    .password-change-container {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        margin: 0 auto;
    }

    .form-label {
        font-size: 1rem;
        font-weight: 500;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>