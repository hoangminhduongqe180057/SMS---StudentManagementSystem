@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using StudentsManagement.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IServiceScopeFactory ServiceScopeFactory

<PageTitle>Two-factor Authentication (2FA)</PageTitle>

<h3 class="two-factor-header">Two-factor Authentication (2FA)</h3>
<StatusMessage />

<div class="two-factor-container">
    @if (canTrack)
    {
        @if (is2faEnabled)
        {
            @if (recoveryCodesLeft == 0)
            {
                <div class="alert alert-danger">
                    <strong>You have no recovery codes left.</strong>
                    <p>You must <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
                </div>
            }
            else if (recoveryCodesLeft == 1)
            {
                <div class="alert alert-danger">
                    <strong>You have 1 recovery code left.</strong>
                    <p>You can <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                </div>
            }
            else if (recoveryCodesLeft <= 3)
            {
                <div class="alert alert-warning">
                    <strong>You have @recoveryCodesLeft recovery codes left.</strong>
                    <p>You should <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                </div>
            }

            @if (isMachineRemembered)
            {
                <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                    <AntiforgeryToken />
                    <button type="submit" class="btn btn-primary">Forget this browser</button>
                </form>
            }

            <a href="Account/Manage/Disable2fa" class="btn btn-primary mt-2">Disable 2FA</a>
            <a href="Account/Manage/GenerateRecoveryCodes" class="btn btn-primary mt-2">Reset recovery codes</a>
        }

        <h4 class="mt-4">Authenticator app</h4>
        @if (!hasAuthenticator)
        {
            <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary">Add authenticator app</a>
        }
        else
        {
            <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary mt-2">Set up authenticator app</a>
            <a href="Account/Manage/ResetAuthenticator" class="btn btn-primary mt-2">Reset authenticator app</a>
        }
    }
    else
    {
        <div class="alert alert-danger">
            <strong>Privacy and cookie policy have not been accepted.</strong>
            <p>You must accept the policy before you can enable two-factor authentication.</p>
        </div>
    }
</div>

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        using var scope = ServiceScopeFactory.CreateScope();
        var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
        var signInManager = scope.ServiceProvider.GetRequiredService<SignInManager<ApplicationUser>>();

        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await userManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await userManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await signInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await userManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you log in again from this browser you will be prompted for your 2FA code.",
            HttpContext);
    }
}

<style>
    .two-factor-header {
        text-align: center;
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #0DAFB2;
    }

    .two-factor-container {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        margin: 0 auto;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .alert {
        margin-top: 15px;
    }

    .mt-2 {
        margin-top: 10px;
    }

    .mt-4 {
        margin-top: 20px;
    }
</style>


@* 
 @page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using StudentsManagement.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IServiceScopeFactory ServiceScopeFactory

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<StatusMessage />
<h3>Two-factor authentication (2FA)</h3>
@if (canTrack)
{
    if (is2faEnabled)
    {
        if (recoveryCodesLeft == 0)
        {
            <div class="alert alert-danger">
                <strong>You have no recovery codes left.</strong>
                <p>You must <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
            </div>
        }
        else if (recoveryCodesLeft == 1)
        {
            <div class="alert alert-danger">
                <strong>You have 1 recovery code left.</strong>
                <p>You can <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }
        else if (recoveryCodesLeft <= 3)
        {
            <div class="alert alert-warning">
                <strong>You have @recoveryCodesLeft recovery codes left.</strong>
                <p>You should <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }

        if (isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />
                <button type="submit" class="btn btn-primary">Forget this browser</button>
            </form>
        }

        <a href="Account/Manage/Disable2fa" class="btn btn-primary">Disable 2FA</a>
        <a href="Account/Manage/GenerateRecoveryCodes" class="btn btn-primary">Reset recovery codes</a>
    }

    <h4>Authenticator app</h4>
    @if (!hasAuthenticator)
    {
        <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary">Add authenticator app</a>
    }
    else
    {
        <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary">Set up authenticator app</a>
        <a href="Account/Manage/ResetAuthenticator" class="btn btn-primary">Reset authenticator app</a>
    }
}
else
{
    <div class="alert alert-danger">
        <strong>Privacy and cookie policy have not been accepted.</strong>
        <p>You must accept the policy before you can enable two factor authentication.</p>
    </div>
}

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        using var scope = ServiceScopeFactory.CreateScope();
        var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
        var signInManager = scope.ServiceProvider.GetRequiredService<SignInManager<ApplicationUser>>();

        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await userManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await userManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await signInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await userManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
            HttpContext);
    }
} *@
