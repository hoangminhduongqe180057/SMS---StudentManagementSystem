@page "/departments-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "System, Academic")]
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime;
@inject DepartmentService DepartmentService;
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Departments List</h3>
            </div>
            <div class="card-body">
                <!-- Success message display -->
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }

                <div class="row">
                    <div class="col-12 d-flex justify-content-between align-items-start mb-3">
                        <!-- Search Section -->
                        <div class="input-group mb-3">
                            <div class="search-container" style="position: relative;">
                                <!-- Button to toggle search type dropdown -->
                                <button class="btn btn-primary" @onclick="ToggleSearchOptions">Search Types</button>

                                <!-- Dropdown menu for search options -->
                                @if (showSearchOptions)
                                {
                                    <div class="dropdown-menu-container">
                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("Code"))">Code</div>
                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("Name"))">Name</div>
                                    </div>
                                }
                            </div>

                            <!-- Conditional Input Field for Search -->
                            @if (!string.IsNullOrEmpty(selectedSearchType))
                            {
                                <input type="text" class="form-control" placeholder="Enter @selectedSearchType" @bind="searchValue" style="max-width: 300px; margin-left: 10px;" />
                                <div class="input-group-append">
                                    <button class="btn btn-primary" @onclick="SearchDepartments" style="margin-left: 10px;">Search</button>
                                    <button class="btn btn-secondary ms-2" @onclick="ClearSearch">Clear</button>
                                </div>
                            }
                        </div>

                        <!-- Right-Aligned Buttons for Add and Export -->
                        <div class="d-flex ms-auto">
                            <a class="btn btn-success mb-3" href="/add-department" style="white-space: nowrap;">Add New Department</a>
                            <a class="btn btn-success mb-3" @onclick="ExportToCsv" style="white-space: nowrap; margin-left: 10px">Export Departments to CSV</a>
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div class="card">
                            @if (departments == null)
                            {
                                <p><em>Loading Departments...</em></p>
                            }
                            else if (!departments.Items.Any())
                            {
                                <div class="alert alert-info">There is no Department List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id <i class="fas @(currentSortField == "Id" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Id"))" style="cursor:pointer"></i></th>
                                                <th>Department Code <i class="fas @(currentSortField == "Code" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Code"))" style="cursor:pointer"></i></th>
                                                <th>Department Name <i class="fas @(currentSortField == "Name" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Name"))" style="cursor:pointer"></i></th>
                                                <th>Created By <i class="fas @(currentSortField == "CreatedById" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("CreatedById"))" style="cursor:pointer"></i></th>
                                                <th>Created On <i class="fas @(currentSortField == "CreatedOn" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("CreatedOn"))" style="cursor:pointer"></i></th>
                                                <th>View</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var department in departments.Items)
                                            {
                                                <tr>
                                                    <td>@department.Id</td>
                                                    <td>@department.Code</td>
                                                    <td>@department.Name</td>
                                                    <td>@department.CreatedById</td>
                                                    <td>@department.CreatedOn.ToShortDateString()</td>
                                                    <td>
                                                        <a class="btn btn-primary" href="/department/detail/@department.Id">View</a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/department/edit/@department.Id">Edit</a>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-danger" @onclick="() => DeleteDepartment(department.Id)">Delete</button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @departments.CurrentPage of @departments.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PaginationModel<Department>? departments;
    private int currentPage = 1;
    private int pageSize = 10;
    private string? successMessage;
    private string searchValue = "";
    private SearchParameters searchParameters = new SearchParameters();
    private string selectedSearchType = "";
    private string currentSortField = "Id";
    private bool sortAscending = true;
    private bool isProcessing = false;
    private bool _isInitialized = false;
    private bool showSearchOptions = false;
    private System.Threading.Timer? successMessageTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedDepartments(currentPage);
    }

    private void ToggleSearchOptions()
    {
        showSearchOptions = !showSearchOptions;
    }

    private void SelectSearchType(string searchType)
    {
        selectedSearchType = searchType;
        searchValue = "";
        showSearchOptions = false;
    }

    private async Task LoadPagedDepartments(int page)
    {
        searchParameters.SortField = currentSortField;
        searchParameters.SortAscending = sortAscending;

        switch (selectedSearchType)
        {
            case "Code":
                searchParameters.Code = searchValue;
                break;
            case "Name":
                searchParameters.Name = searchValue;
                break;
        }
        departments = await DepartmentService.GetPagedDepartmentsAsync(page, pageSize, searchParameters);
    }

    private async Task SortBy(string field)
    {
        if (isProcessing) return;
        isProcessing = true;

        try
        {
            if (currentSortField == field)
            {
                sortAscending = !sortAscending;
            }
            else
            {
                currentSortField = field;
                sortAscending = true;
            }
            currentPage = 1;

            await LoadPagedDepartments(currentPage);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task SearchDepartments()
    {
        currentPage = 1;
        await LoadPagedDepartments(currentPage);
    }

    private async Task ClearSearch()
    {
        searchValue = "";
        currentPage = 1;
        await LoadPagedDepartments(currentPage);
    }

    private async Task DeleteDepartment(int id)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this department?");
        if (confirm)
        {
            var department = await DepartmentService.DeleteAsync(id);
            if (department != null)
            {
                departments.Items.Remove(department); // Remove the item from the local list to reflect the deletion immediately
                SetSuccessMessage("Department deleted successfully.");
                StateHasChanged(); // Refresh UI to display changes
                await LoadPagedDepartments(currentPage);
            }
            else
            {
                // Optionally, handle cases where deletion fails or the response is null
                SetSuccessMessage("Failed to delete department.");
            }
        }
    }

    private void SetSuccessMessage(string message)
    {
        successMessage = message;
        successMessageTimer?.Dispose();
        successMessageTimer = new System.Threading.Timer(_ =>
        {
            successMessage = null;
            InvokeAsync(StateHasChanged); // Refresh UI to clear message
        }, null, 5000, System.Threading.Timeout.Infinite);
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadPagedDepartments(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadPagedDepartments(currentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    private bool CanGoToPreviousPage => departments?.CurrentPage > 1;
    private bool CanGoToNextPage => departments?.CurrentPage < departments?.TotalPages;

    private async Task ExportToCsv()
    {
        if (_isInitialized)
        {
            var csvBytes = await DepartmentService.ExportToCsvAsync();
            await JsRuntime.InvokeVoidAsync("downloadFile", "Departments.csv", "text/csv", csvBytes);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isInitialized = true;
            await InvokeAsync(StateHasChanged);
        }
    }
}
