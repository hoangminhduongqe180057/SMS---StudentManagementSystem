@page "/teachers-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "System, Academic")]
@using StudentsManagement.Client.Services
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRunTime;
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Teachers List</h3>
            </div>
            <div class="card-body">

                <!-- Success message display -->
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }

                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <div class="row">
                                    <div class="col-12 d-flex justify-content-between align-items-start">
                                        <!-- Left-aligned: Import Button -->
                                        <div class="file-input-container">
                                            <InputFile OnChange="HandleFileSelected" accept=".csv" class="file-input-custom" id="fileInput" />
                                            <button class="btn btn-primary btn-custom mt-2" @onclick="HandleImportClick" disabled="@isImporting">Import Teachers</button>
                                        </div>

                                        <!-- Right-aligned: Add and Export Buttons -->
                                        <div class="d-flex">
                                            <a class="btn btn-success me-2" style="margin-top: 8px" href="/add-teacher">Add New Teacher</a>
                                            <a class="btn btn-success" style="margin-left: 10px; margin-top: 8px" @onclick="ExportToCsv">Export Teachers to CSV</a>
                                        </div>
                                    </div>

                                    <!-- Search Section below Import -->
                                    <div class="col-12 mt-3">
                                        <div class="input-group mb-3">
                                            <div class="search-container" style="position: relative;">
                                                <!-- Button to toggle search type dropdown -->
                                                <button class="btn btn-primary" @onclick="ToggleSearchOptions">Search Types</button>

                                                <!-- Smooth dropdown menu for search options -->
                                                @if (showSearchOptions)
                                                {
                                                    <div class="dropdown-menu-container">
                                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("Name"))">Name</div>
                                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("Email"))">Email</div>
                                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("PhoneNumber"))">Phone Number</div>
                                                    </div>
                                                }
                                            </div>

                                            <!-- Conditional Input Field for Search -->
                                            @if (!string.IsNullOrEmpty(selectedSearchType))
                                            {
                                                <input type="text" class="form-control" placeholder="Enter @selectedSearchType" @bind="searchValue" style="max-width: 300px; margin-left: 10px;" />
                                                <div class="input-group-append">
                                                    <button class="btn btn-primary" @onclick="SearchTeachers" style="margin-left: 10px;">Search</button>
                                                    <button class="btn btn-secondary ms-2" @onclick="ClearSearch">Clear</button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (teachers == null)
                            {
                                <p><em>Loading Teachers...</em></p>
                            }
                            else if (!teachers.Items.Any())
                            {
                                <div class="alert alert-info"> There is no Teacher List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id  <i class="fas @(currentSortField == "Id" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Id"))" style="cursor:pointer"></i></th>
                                                <th>Full Name <i class="fas @(currentSortField == "FullName" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("FullName"))" style="cursor:pointer"></i></th>
                                                <th>Gender <i class="fas @(currentSortField == "Gender" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Gender"))" style="cursor:pointer"></i></th>
                                                <th>Address  <i class="fas @(currentSortField == "Address" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Address"))" style="cursor:pointer"></i></th>
                                                <th>Email <i class="fas @(currentSortField == "EmailAddress" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("EmailAddress"))" style="cursor:pointer"></i></th>
                                                <th>PhoneNo  <i class="fas @(currentSortField == "PhoneNumber" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("PhoneNumber"))" style="cursor:pointer"></i></th>
                                                <th>Marital Status  <i class="fas @(currentSortField == "MaritalStatus" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("MaritalStatus"))" style="cursor:pointer"></i></th>
                                                <th>View</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var teacher in teachers.Items)
                                            {
                                                <tr>
                                                    <td>@teacher.Id</td>
                                                    <td>@teacher.FullName</td>
                                                    <td>@teacher.Gender?.Description</td>
                                                    <td>@teacher.Address</td>
                                                    <td>@teacher.EmailAddress</td>
                                                    <td>@teacher.PhoneNumber</td>
                                                    <td>@teacher.MaritalStatus?.Description</td>
                                                    <td>
                                                        <a class="btn btn-primary" href="/teacher/detail/@teacher.Id"> View </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/teacher/edit/@teacher.Id"> Edit </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-danger" @onclick="() => DeleteTeacher(teacher.Id)"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @teachers.CurrentPage of @teachers.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    private PaginationModel<Teacher>? teachers;
    private int currentPage = 1;
    private int pageSize = 10;
    private bool _isInitialized = false;

    // Search functionality variables
    private bool showSearchOptions = false;
    private string selectedSearchType = "";
    private string searchValue = "";
    private IBrowserFile? selectedFile; // Import
    private bool isImporting = false;
    private string fileInputKey = Guid.NewGuid().ToString();
    private string? successMessage;
    private System.Threading.Timer? successMessageTimer;

    private SearchParameters searchParameters = new SearchParameters();
    private string currentSortField = "Id"; // Trường hiện tại để sắp xếp
    private bool sortAscending = true; // Biến để theo dõi thứ tự sắp xếp (tăng dần hoặc giảm dần)
    private bool isProcessing = false;  // Biến cờ để theo dõi quá trình xử lý

    private async Task SortBy(string field)
    {
        if (isProcessing) return; // Ngăn chặn các thao tác khi đang xử lý
        isProcessing = true;

        try
        {
            if (currentSortField == field)
            {
                sortAscending = !sortAscending;
            }
            else
            {
                currentSortField = field;
                sortAscending = true;
            }
            currentPage = 1;

            await LoadPagedTeachers(currentPage);
        }
        finally
        {
            isProcessing = false;  // Kết thúc xử lý
        }
    }

    private async Task SearchTeachers()
    {
        currentPage = 1;
        await LoadPagedTeachers(currentPage);
    }

    private async Task ClearSearch()
    {
        searchValue = "";
        searchParameters = new SearchParameters();
        currentPage = 1;
        await LoadPagedTeachers(currentPage);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedTeachers(currentPage);
    }

    private async Task LoadPagedTeachers(int page)
    {
        searchParameters.SortField = currentSortField;  // Trường để sắp xếp
        searchParameters.SortAscending = sortAscending;  // Thứ tự sắp xếp

        switch (selectedSearchType)
        {
            case "Name":
                searchParameters.Name = searchValue;
                break;
            case "Email":
                searchParameters.Email = searchValue;
                break;
            case "PhoneNumber":
                searchParameters.PhoneNumber = searchValue;
                break;
        }
        teachers = await TeacherService.GetPagedTeachersAsync(page, pageSize, searchParameters);
    }

    private async Task DebouncedSortBy(string field)
    {
        if (isProcessing) return;
        isProcessing = true;

        // Đợi một khoảng thời gian ngắn trước khi xử lý
        await Task.Delay(300); // 300ms debounce

        try
        {
            await SortBy(field);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ToggleSearchOptions()
    {
        showSearchOptions = !showSearchOptions;
    }

    private void SelectSearchType(string searchType)
    {
        selectedSearchType = searchType;
        searchValue = "";
        showSearchOptions = false;
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadPagedTeachers(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadPagedTeachers(currentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    private bool CanGoToPreviousPage => teachers?.CurrentPage > 1;
    private bool CanGoToNextPage => teachers?.CurrentPage < teachers?.TotalPages;

    private async Task DeleteTeacher(int id)
    {
        bool confirm = await JsRunTime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete?");
        if (confirm)
        {
            var teacher = await TeacherService.DeleteAsync(id);
            bool result = teacher != null;
            if (result)
            {
                await LoadPagedTeachers(currentPage);
            }
        }
    }

    private async Task ExportToCsv()
    {
        if (_isInitialized)
        {
            var csvBytes = await TeacherService.ExportToCsvAsync();
            await JsRunTime.InvokeVoidAsync("downloadFile", "Teachers.csv", "text/csv", csvBytes);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isInitialized = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File; // Assign file
    }

    private async Task HandleImportClick()
    {
        if (isImporting)
        {
            Console.WriteLine("Import process already in progress.");
            return;
        }

        isImporting = true;
        successMessage = null; // Clear any previous success message
        StateHasChanged();

        try
        {
            await ImportTeachers();
        }
        finally
        {
            isImporting = false;
            StateHasChanged();
            Console.WriteLine("Import process completed.");
        }
    }

    private async Task ImportTeachers()
    {
        if (selectedFile == null)
        {
            Console.WriteLine("No file selected for import.");
            return;
        }

        try
        {
            using var fileStream = selectedFile.OpenReadStream();
            bool isSuccess = await TeacherService.ImportTeachersAsync(fileStream);

            if (isSuccess)
            {
                successMessage = "Teachers imported successfully!";
                selectedFile = null; // Clear the selected file

                // Clear the file input display using JavaScript
                await JsRunTime.InvokeVoidAsync("clearFileInput", "fileInput");

                // Reload the students list after import
                await LoadPagedTeachers(currentPage);
                Console.WriteLine("Teacher data loaded after import.");

                // Start a timer to clear the success message after 5 seconds
                successMessageTimer?.Dispose();
                successMessageTimer = new System.Threading.Timer(_ =>
                {
                    successMessage = null;
                    InvokeAsync(StateHasChanged); // Refresh UI
                }, null, 5000, System.Threading.Timeout.Infinite); // 5 seconds delay
            }
            else
            {
                successMessage = "Failed to import teachers.";
                Console.WriteLine("Import failed.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during import: {ex.Message}");
        }
    }
}
