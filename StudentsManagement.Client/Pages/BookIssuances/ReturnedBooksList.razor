@page "/returnedBooks-list"
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Returned Book History</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (!AllBookReturned.Any())
                            {
                                <p><em>Loading Returned Books...</em></p>
                            }
                            @if (AllBookReturned.Any())
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id</th>
                                                <th>Book Name</th>
                                                <th>Issue Date</th>
                                                <th>Due Date</th>
                                                <th>Student Name</th>
                                                <th>Return Date</th>
                                                <th>Status</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var book in AllBookReturned)
                                            {
                                                <tr>
                                                    <td>@book.Id</td>
                                                    <td>@book.Book?.Name</td>
                                                    <td>@book.IssueDate.ToShortDateString()</td>
                                                    <td>@book.DueDate.ToShortDateString()</td>
                                                    <td>@book.Student?.FullName</td>
                                                    <td>@book.ReturnDate?.ToShortDateString()</td>
                                                    <td class="text-warning">@book.Status?.Code</td>
                                                    <td>
                                                        <a class="btn btn-danger" href="/bookIssuance/delete/@book.Id"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info"> There is no Returned Book List Availlable</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<BookIssuance> AllBookReturned { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAllBookIssuances();
    }
    public async Task LoadAllBookIssuances()
    {
        var data = await BookIssuanceService.GetAllAsync();
        var returnedBook = data.Where(x => x.ReturnDate.HasValue && x.ReturnDate.Value != DateTime.MinValue);

        AllBookReturned.Clear();

        AllBookReturned.AddRange(returnedBook);
    }
}
