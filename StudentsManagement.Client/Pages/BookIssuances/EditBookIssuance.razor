@page "/bookIssuance/edit/{id:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3>Update Book Issuance Detail</h3>

<hr />
<div class="row">
    <div class="col-md-12">
        <EditForm Model="bookobj" OnValidSubmit="UpdateBookIssuance" FormName="updatebookissuance" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Issue Date</label>
                            <InputDate for="IssueDate" class="form-control" @bind-Value="@bookobj.IssueDate" />
                            <ValidationMessage For="()=>bookobj.IssueDate" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Due Date</label>
                            <InputDate for="DueDate" class="form-control" @bind-Value="@bookobj.DueDate" />
                            <ValidationMessage For="()=>bookobj.DueDate" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Student's Class</label>
                            <InputSelect class="form-control" @bind-Value="SelectedClassId">
                                <option value="">Select Class</option>
                                @foreach (var classItem in Classes)
                                {
                                    <option value="@classItem.Id">@classItem.Description</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="()=>SelectedClassId" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Student</label>
                            <InputSelect class="form-control" @bind-Value="@bookobj.StudentId">
                                <option value="">Select Student</option>
                                @foreach (var student in FilteredStudents)
                                {
                                    <option value="@student.Id">@student.FullName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="()=>bookobj.StudentId" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Book Name</label>
                            <InputSelect for="BookId" class="form-control" @bind-Value="@bookobj.BookId">
                                <option value="">Select Class</option>
                                @if (Books != null && Books.Any())
                                {
                                    @foreach (var book in Books)
                                    {
                                        <option value="@book.Id">@book.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="()=>bookobj.BookId" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Creator</label>
                            <InputText for="CreatedById" class="form-control" @bind-Value="@bookobj.CreatedById" />
                            <ValidationMessage For="()=>bookobj.CreatedById" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Notes</label>
                            <InputText for="Notes" class="form-control" @bind-Value="@bookobj.Notes" />
                            <ValidationMessage For="()=>bookobj.Notes" />
                        </div>
                    </div>

                </div>
                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary">Save Book Issuance</button>
                    <button type="button" @onclick="()=>Cancel()" class="btn btn-danger">Back to List</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public BookIssuance bookobj { get; set; } = new();
    List<Book> Books = new List<Book>();
    List<SystemCodeDetail> Classes = new List<SystemCodeDetail>();
    List<Student> FilteredStudents = new List<Student>(); // This will be displayed in the dropdown
    List<Student> Students = new List<Student>(); // All students
    private int? selectedClassId;
    private string serverErrorMessage;

    // Property for the selected class
    public int? SelectedClassId
    {
        get => selectedClassId;
        set
        {
            selectedClassId = value;
            OnClassChanged(selectedClassId);  // Call the filtering logic when the class changes
        }
    }

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBookIssuance();
        Books = await BookService.GetAllAsync();
        Classes = await SystemCodeDetailService.GetByCodeAsync("Class");
        Students = await StudentService.GetAllStudentsAsync();

        // Initialize with all students by default
        FilteredStudents = Students;
        Books = await BookService.GetAllAsync();
    }

    private void OnClassChanged(int? selectedClassId)
    {
        if (selectedClassId.HasValue)
        {
            // Ensure filtering happens when a class is selected
            FilteredStudents = Students.Where(s => s.ClassId == selectedClassId.Value).ToList();
            Console.WriteLine($"Filtered Students Count: {FilteredStudents.Count}");
        }
        else
        {
            // If no class is selected, show all students
            FilteredStudents = Students;
        }

        // Trigger UI refresh
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadBookIssuance()
    {
        bookobj = await BookIssuanceService.GetByIdAsync(id);
    }

    protected async Task UpdateBookIssuance()
    {
        bookobj.ClassId = selectedClassId.Value;
        try
        {
            var result = await BookIssuanceService.UpdateAsync(bookobj);
            navigation.NavigateTo("/bookIssuances-list", forceLoad: true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error while updating the book issuance: " + ex.Message);
        }
    }

    public void Cancel()
    {
        navigation.NavigateTo("/bookIssuances-list", forceLoad: true);
    }
    private void HandleInvalidSubmit(EditContext editContext)
    {
        serverErrorMessage = "Please fill in all required fields.";
    }
}
