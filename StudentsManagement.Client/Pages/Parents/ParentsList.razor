@page "/parents-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "System, Academic")]
@using StudentsManagement.Client.Services
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRunTime;
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Student's Parents List</h3>
            </div>
            <div class="card-body">
                <!-- Success message display -->
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }

                <div class="row">
                    <div class="col-12 d-flex justify-content-between align-items-start mb-3">
                        <!-- Search Section -->
                        <div class="input-group mb-3">
                            <div class="search-container" style="position: relative;">
                                <!-- Button to toggle search type dropdown -->
                                <button class="btn btn-primary" @onclick="ToggleSearchOptions">Search Types</button>

                                <!-- Dropdown menu for search options -->
                                @if (showSearchOptions)
                                {
                                    <div class="dropdown-menu-container">
                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("Name"))">Name</div>
                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("Email"))">Email</div>
                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("PhoneNumber"))">Phone Number</div>
                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("StudentName"))">Student Name</div>
                                        <div class="dropdown-item" @onclick="@(() => SelectSearchType("Class"))">Class</div>
                                    </div>
                                }
                            </div>

                            <!-- Conditional Input Field for Search -->
                            @if (!string.IsNullOrEmpty(selectedSearchType))
                            {
                                <input type="text" class="form-control" placeholder="Enter @selectedSearchType" @bind="searchValue" style="max-width: 300px; margin-left: 10px;" />
                                <div class="input-group-append">
                                    <button class="btn btn-primary" @onclick="SearchParents" style="margin-left: 10px;">Search</button>
                                    <button class="btn btn-secondary ms-2" @onclick="ClearSearch">Clear</button>
                                </div>
                            }
                        </div>

                        <!-- Right-Aligned Buttons for Add and Export -->
                        <div class="d-flex ms-auto">
                            <a class="btn btn-success mb-3 me-2" href="/add-parent" style="white-space: nowrap;">Add New Parent</a>
                            <a class="btn btn-success mb-3" @onclick="ExportToCsv" style="white-space: nowrap; margin-left: 10px">Export Parent to CSV</a>
                        </div>
                    </div>


                    <div class="col-md-12">
                        <div class="card">
                            @if (parents == null)
                            {
                                <p><em>Loading Parents...</em></p>
                            }
                            else if (!parents.Items.Any())
                            {
                                <div class="alert alert-info">There is no Parent List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id <i class="fas @(currentSortField == "Id" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Id"))" style="cursor:pointer"></i></th>
                                                <th>Full Name <i class="fas @(currentSortField == "FullName" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("FullName"))" style="cursor:pointer"></i></th>
                                                <th>Email <i class="fas @(currentSortField == "EmailAddress" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("EmailAddress"))" style="cursor:pointer"></i></th>
                                                <th>Phone No <i class="fas @(currentSortField == "PhoneNumber" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("PhoneNumber"))" style="cursor:pointer"></i></th>
                                                <th>Student<i class="fas @(currentSortField == "Student" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("StudentName"))" style="cursor:pointer"></i></th>
                                                <th>Class <i class="fas @(currentSortField == "Class" ? (sortAscending ? "fa-sort-up" : "fa-sort-down") : "fa-sort")" @onclick="@(() => SortBy("Class"))" style="cursor:pointer"></i></th>
                                                <th>View</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var parent in parents.Items)
                                            {
                                                <tr>
                                                    <td>@parent.Id</td>
                                                    <td>@parent.FullName</td>
                                                    <td>@parent.EmailAddress</td>
                                                    <td>@parent.PhoneNumber</td>
                                                    <td>@parent.Student?.FullName</td>
                                                    <td>@parent.Class?.Description</td>
                                                    <td>
                                                        <a class="btn btn-primary" href="/parent/detail/@parent.Id">View</a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/parent/edit/@parent.Id">Edit</a>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-danger" @onclick="() => DeleteParent(parent.Id)">Delete</button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @parents.CurrentPage of @parents.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PaginationModel<Parent>? parents;
    private int currentPage = 1;
    private int pageSize = 10;
    private bool _isInitialized = false;

    // Search functionality variables
    private bool showSearchOptions = false;
    private string selectedSearchType = "";
    private string searchValue = "";
    private string? successMessage;
    private System.Threading.Timer? successMessageTimer;

    private SearchParameters searchParameters = new SearchParameters();
    private string currentSortField = "Id";
    private bool sortAscending = true;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedParents(currentPage);
    }

    private async Task SortBy(string field)
    {
        if (isProcessing) return;
        isProcessing = true;

        try
        {
            if (currentSortField == field)
            {
                sortAscending = !sortAscending;
            }
            else
            {
                currentSortField = field;
                sortAscending = true;
            }
            currentPage = 1;

            await LoadPagedParents(currentPage);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task SearchParents()
    {
        currentPage = 1;
        await LoadPagedParents(currentPage);
    }

    private async Task ClearSearch()
    {
        searchValue = "";
        searchParameters = new SearchParameters();
        currentPage = 1;
        await LoadPagedParents(currentPage);
    }

    private async Task LoadPagedParents(int page)
    {
        searchParameters.SortField = currentSortField;
        searchParameters.SortAscending = sortAscending;

        switch (selectedSearchType)
        {
            case "Id":
                searchParameters.Class = searchValue;
                break;
            case "Name":
                searchParameters.Name = searchValue;
                break;
            case "Email":
                searchParameters.Email = searchValue;
                break;
            case "PhoneNumber":
                searchParameters.PhoneNumber = searchValue;
                break;
            case "StudentName":
                searchParameters.StudentName = searchValue;
                break;
            case "Class":
                searchParameters.Class = searchValue;
                break;
        }

        parents = await ParentService.GetPagedParentsAsync(page, pageSize, searchParameters);
    }

    private void ToggleSearchOptions()
    {
        showSearchOptions = !showSearchOptions;
    }

    private void SelectSearchType(string searchType)
    {
        selectedSearchType = searchType;
        searchValue = "";
        showSearchOptions = false;
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadPagedParents(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadPagedParents(currentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    private bool CanGoToPreviousPage => parents?.CurrentPage > 1;
    private bool CanGoToNextPage => parents?.CurrentPage < parents?.TotalPages;

    private async Task DeleteParent(int id)
    {
        bool confirm = await JsRunTime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete?");
        if (confirm)
        {
            var parent = await ParentService.DeleteAsync(id);
            if (parent != null)
            {
                await LoadPagedParents(currentPage);
                successMessage = "Parent deleted successfully.";

                successMessageTimer?.Dispose();
                successMessageTimer = new System.Threading.Timer(_ =>
                {
                    successMessage = null;
                    InvokeAsync(StateHasChanged);
                }, null, 5000, System.Threading.Timeout.Infinite);
            }
        }
    }

    private async Task ExportToCsv()
    {
        if (_isInitialized)
        {
            var csvBytes = await ParentService.ExportToCsvAsync();
            await JsRunTime.InvokeVoidAsync("downloadFile", "Parents.csv", "text/csv", csvBytes);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isInitialized = true;
            await InvokeAsync(StateHasChanged);
        }
    }
}
