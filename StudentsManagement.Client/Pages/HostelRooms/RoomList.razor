@page "/hostelrooms-list"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "System, Hostel")]
@using StudentsManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Hostel Rooms List</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <p><a class="btn btn-success float-end" href="/add-hostelroom">Add New Hostel Room</a></p>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (hostelRoom == null)
                            {
                                <p><em>Loading Hostel Rooms List...</em></p>
                            }
                            else if (!hostelRoom.Items.Any())
                            {
                                <div class="alert alert-info"> There is no Hostel Room List Available</div>
                            }
                            else
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Id</th>
                                                <th>Room No</th>
                                                <th>No Of Bed</th>
                                                <th>Description</th>
                                                <th>Cost per bed</th>
                                                <th>Room Type</th>
                                                <th>View</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var hostel in hostelRoom.Items)
                                            {
                                                <tr>
                                                    <td>@hostel.Id</td>
                                                    <td>@hostel.RoomNo</td>
                                                    <td>@hostel.NoOfBeds</td>
                                                    <td>@hostel.Description</td>
                                                    <td>@hostel.CostPerBed</td>
                                                    <td>@hostel.RoomType?.Description</td>
                                                    <td>
                                                        <a class="btn btn-primary" href="/hostelroom/detail/@hostel.Id"> View </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-success" href="/hostelroom/edit/@hostel.Id"> Edit </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-danger" @onclick="() => ConfirmDelete(hostel.Id)"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <!-- Pagination Controls -->
                                    <div class="button-group mt-3">
                                        <button class="btn btn-custom" @onclick="PreviousPage" style="@GetButtonStyle(!CanGoToPreviousPage)">Previous</button>
                                        <button class="btn btn-custom ms-2" @onclick="NextPage" style="@GetButtonStyle(!CanGoToNextPage)">Next</button>
                                    </div>
                                    <p class="mt-2">Page @hostelRoom.CurrentPage of @hostelRoom.TotalPages</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PaginationModel<HostelRoom>? hostelRoom;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadPagedHostelRooms(currentPage);
    }

    private async Task LoadPagedHostelRooms(int page)
    {
        hostelRoom = await HostelRoomService.GetPagedHostelRoomsAsync(page, pageSize);
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadPagedHostelRooms(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadPagedHostelRooms(currentPage);
        }
    }

    private string GetButtonStyle(bool isInactive)
    {
        return isInactive ? "opacity: 0.6; pointer-events: none;" : "";
    }

    private bool CanGoToPreviousPage => hostelRoom?.CurrentPage > 1;
    private bool CanGoToNextPage => hostelRoom?.CurrentPage < hostelRoom?.TotalPages;

    private async Task DeleteHostelRoom(int id)
    {
        var hostel = await HostelRoomService.GetByIdAsync(id);
        bool result = hostel != null;
        if (result)
        {
            await LoadPagedHostelRooms(currentPage);
        }
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete?");
        if (confirm)
        {
            await DeleteHostelRoom(id);
        }
    }


}
