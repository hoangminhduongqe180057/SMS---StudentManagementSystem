@page "/add-hostelroom"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using StudentsManagement.Shared.Models
@using System.Security.Claims
@inject NavigationManager navigation;
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject HttpClient Http;
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Add New Hostel Room</h3>
            </div>
            <div class="card-body">
                <EditForm Model="hostelroomobj" OnValidSubmit="CreateHostelRoom" FormName="addHostelRoom" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="col-md-12">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Room No</label>
                                    <InputText for="RoomNo" class="form-control" @bind-Value="@hostelroomobj.RoomNo" />
                                    <ValidationMessage For="()=>hostelroomobj.RoomNo" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Cost Per Bed</label>
                                    <InputNumber for="CostPerBed" class="form-control" @bind-Value="@hostelroomobj.CostPerBed" />
                                    <ValidationMessage For="()=>hostelroomobj.CostPerBed" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">No Of Beds</label>
                                    <InputNumber for="NoOfBeds" class="form-control" @bind-Value="@hostelroomobj.NoOfBeds" />
                                    <ValidationMessage For="()=>hostelroomobj.NoOfBeds" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Room Description</label>
                                    <InputTextArea for="Description" class="form-control" @bind-Value="@hostelroomobj.Description" />
                                    <ValidationMessage For="()=>hostelroomobj.Description" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Room Type</label>
                                    <InputSelect for="RoomTypeId" class="form-control" @bind-Value="@hostelroomobj.RoomTypeId">
                                        <option value="">Select Room Type</option>
                                        @if (RoomType != null && RoomType.Any())
                                        {
                                            @foreach (var hostel in RoomType)
                                            {
                                                <option value="@hostel.Id">@hostel.Description</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="()=>hostelroomobj.RoomTypeId" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Hostel Name</label>
                                    <InputSelect for="HostelId" class="form-control" @bind-Value="@hostelroomobj.HostelId">
                                        <option value="">Select Hostel</option>
                                        @if (HostelCatgories != null && HostelCatgories.Any())
                                        {
                                            @foreach (var hostel in HostelCatgories)
                                            {
                                                <option value="@hostel.Id">@hostel.HostelName</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="()=>hostelroomobj.HostelId" />
                                </div>
                            </div>

                        </div>
                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-primary">Save Hostel Room</button>
                            <button type="button" @onclick="()=>Cancel()" class="btn btn-danger">Back to List</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    [SupplyParameterFromForm]
    public HostelRoom hostelroomobj { get; set; } = new();

    List<Hostel> HostelCatgories = new List<Hostel>() ;
    List<SystemCodeDetail> RoomType = new List<SystemCodeDetail>();
    private string serverErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        RoomType = await SystemCodeDetailService.GetByCodeAsync("RoomType");
        HostelCatgories = await HostelService.GetAllAsync();
    }

    protected async Task CreateHostelRoom()
    {
        try
        {
            var result = HostelRoomService.AddAsync(hostelroomobj);
            navigation.NavigateTo("/hostelrooms-list", forceLoad: true);
        }
        catch (Exception ex)
        {
            if (JSRuntime != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error while saving the hostel room: " + ex.Message);
            }
        }
    }
    public void Cancel()
    {
        navigation.NavigateTo("/hostelrooms-list", forceLoad: true);
    }
    private void HandleInvalidSubmit(EditContext editContext)
    {
        serverErrorMessage = "Please fill in all required fields.";
    }
}
